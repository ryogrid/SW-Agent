/* soapStub.h
   Generated by gSOAP 2.7.11 from diff_count.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not redeclare here */

#endif

#ifndef SOAP_TYPE_xsd__hexBinary
#define SOAP_TYPE_xsd__hexBinary (7)
/* hexBinary schema type: */
struct xsd__hexBinary
{
public:
	unsigned char *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (11)
/* Base64 schema type: */
struct xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
};
#endif

#ifndef SOAP_TYPE_xsd__Dimebase64Binary
#define SOAP_TYPE_xsd__Dimebase64Binary (12)
/* Base64 schema type: */
struct xsd__Dimebase64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	char *WSref__location;	/* optional attribute of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_ns__getCurrentFoundCountResponse
#define SOAP_TYPE_ns__getCurrentFoundCountResponse (15)
/* ns:getCurrentFoundCountResponse */
struct ns__getCurrentFoundCountResponse
{
public:
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__getCurrentFoundCount
#define SOAP_TYPE_ns__getCurrentFoundCount (16)
/* ns:getCurrentFoundCount */
struct ns__getCurrentFoundCount
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__changeConditionToFindResponse
#define SOAP_TYPE_ns__changeConditionToFindResponse (18)
/* ns:changeConditionToFindResponse */
struct ns__changeConditionToFindResponse
{
public:
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__changeConditionToFind
#define SOAP_TYPE_ns__changeConditionToFind (19)
/* ns:changeConditionToFind */
struct ns__changeConditionToFind
{
public:
	int color;	/* required element of type xsd:int */
	int threshold;	/* required element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__resetCounterResponse
#define SOAP_TYPE_ns__resetCounterResponse (21)
/* ns:resetCounterResponse */
struct ns__resetCounterResponse
{
public:
	int *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
};
#endif

#ifndef SOAP_TYPE_ns__resetCounter
#define SOAP_TYPE_ns__resetCounter (22)
/* ns:resetCounter */
struct ns__resetCounter
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__getAFrameHexBinaryResponse
#define SOAP_TYPE_ns__getAFrameHexBinaryResponse (25)
/* ns:getAFrameHexBinaryResponse */
struct ns__getAFrameHexBinaryResponse
{
public:
	struct xsd__hexBinary *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:hexBinary */
};
#endif

#ifndef SOAP_TYPE_ns__getAFrameHexBinary
#define SOAP_TYPE_ns__getAFrameHexBinary (26)
/* ns:getAFrameHexBinary */
struct ns__getAFrameHexBinary
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__getAFramebase64BinaryResponse
#define SOAP_TYPE_ns__getAFramebase64BinaryResponse (29)
/* ns:getAFramebase64BinaryResponse */
struct ns__getAFramebase64BinaryResponse
{
public:
	struct xsd__base64Binary *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:base64Binary */
};
#endif

#ifndef SOAP_TYPE_ns__getAFramebase64Binary
#define SOAP_TYPE_ns__getAFramebase64Binary (30)
/* ns:getAFramebase64Binary */
struct ns__getAFramebase64Binary
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_ns__getAFramebaseDimeStreamResponse
#define SOAP_TYPE_ns__getAFramebaseDimeStreamResponse (33)
/* ns:getAFramebaseDimeStreamResponse */
struct ns__getAFramebaseDimeStreamResponse
{
public:
	struct xsd__Dimebase64Binary *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:Dimebase64Binary */
};
#endif

#ifndef SOAP_TYPE_ns__getAFramebaseDimeStream
#define SOAP_TYPE_ns__getAFramebaseDimeStream (34)
/* ns:getAFramebaseDimeStream */
struct ns__getAFramebaseDimeStream
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (35)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (36)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (38)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (41)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (42)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Typedef Synonyms                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operations                                                         *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns__getCurrentFoundCount(struct soap*, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__changeConditionToFind(struct soap*, int color, int threshold, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__resetCounter(struct soap*, int *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__getAFrameHexBinary(struct soap*, struct xsd__hexBinary *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__getAFramebase64Binary(struct soap*, struct xsd__base64Binary *result);

SOAP_FMAC5 int SOAP_FMAC6 ns__getAFramebaseDimeStream(struct soap*, struct xsd__Dimebase64Binary *result);

/******************************************************************************\
 *                                                                            *
 * Stubs                                                                      *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getCurrentFoundCount(struct soap *soap, const char *soap_endpoint, const char *soap_action, int *result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__changeConditionToFind(struct soap *soap, const char *soap_endpoint, const char *soap_action, int color, int threshold, int *result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__resetCounter(struct soap *soap, const char *soap_endpoint, const char *soap_action, int *result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getAFrameHexBinary(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct xsd__hexBinary *result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getAFramebase64Binary(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct xsd__base64Binary *result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns__getAFramebaseDimeStream(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct xsd__Dimebase64Binary *result);

/******************************************************************************\
 *                                                                            *
 * Skeletons                                                                  *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurrentFoundCount(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__changeConditionToFind(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__resetCounter(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFrameHexBinary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFramebase64Binary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFramebaseDimeStream(struct soap*);

#endif

/* End of soapStub.h */
