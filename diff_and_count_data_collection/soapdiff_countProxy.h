/* soapdiff_countProxy.h
   Generated by gSOAP 2.7.11 from diff_count.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapdiff_countProxy_H
#define soapdiff_countProxy_H
#include "soapH.h"
class diff_count
{   public:
	/// Runtime engine context allocated in constructor
	struct soap *soap;
	/// Endpoint URL of service 'diff_count' (change as needed)
	const char *endpoint;
	/// Constructor allocates soap engine context, sets default endpoint URL, and sets namespace mapping table
	diff_count()
	{ soap = soap_new(); endpoint = "http://localhost:1024/"; if (soap && !soap->namespaces) { static const struct Namespace namespaces[] = 
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"WSref", "http://schemas.xmlsoap.org/ws/2002/04/reference/", NULL, NULL},
	{"ns", "urn:diff_count", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap->namespaces = namespaces; } };
	/// Destructor frees deserialized data and soap engine context
	virtual ~diff_count() { if (soap) { soap_destroy(soap); soap_end(soap); soap_free(soap); } };
	/// Invoke 'getCurrentFoundCount' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__getCurrentFoundCount(int *result) { return soap ? soap_call_ns__getCurrentFoundCount(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'changeConditionToFind' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__changeConditionToFind(int color, int threshold, int *result) { return soap ? soap_call_ns__changeConditionToFind(soap, endpoint, NULL, color, threshold, result) : SOAP_EOM; };
	/// Invoke 'resetCounter' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__resetCounter(int *result) { return soap ? soap_call_ns__resetCounter(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'getAFrameHexBinary' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__getAFrameHexBinary(struct xsd__hexBinary *result) { return soap ? soap_call_ns__getAFrameHexBinary(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'getAFramebase64Binary' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__getAFramebase64Binary(struct xsd__base64Binary *result) { return soap ? soap_call_ns__getAFramebase64Binary(soap, endpoint, NULL, result) : SOAP_EOM; };
	/// Invoke 'getAFramebaseDimeStream' of service 'diff_count' and return error code (or SOAP_OK)
	virtual int ns__getAFramebaseDimeStream(struct xsd__Dimebase64Binary *result) { return soap ? soap_call_ns__getAFramebaseDimeStream(soap, endpoint, NULL, result) : SOAP_EOM; };
};
#endif
