/* soapServer.cpp
   Generated by gSOAP 2.7.11 from diff_count.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.7.11 2008-11-17 08:24:46 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif

	do
	{
#ifdef WITH_FASTCGI
		if (FCGI_Accept() < 0)
		{
			soap->error = SOAP_EOF;
			return soap_send_fault(soap);
		}
#endif

		soap_begin(soap);

#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif

		if (soap_begin_recv(soap))
		{	if (soap->error < SOAP_STOP)
			{
#ifdef WITH_FASTCGI
				soap_send_fault(soap);
#else 
				return soap_send_fault(soap);
#endif
			}
			soap_closesock(soap);

			continue;
		}

		if (soap_envelope_begin_in(soap)
		 || soap_recv_header(soap)
		 || soap_body_begin_in(soap)
		 || soap_serve_request(soap)
		 || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getCurrentFoundCount"))
		return soap_serve_ns__getCurrentFoundCount(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:changeConditionToFind"))
		return soap_serve_ns__changeConditionToFind(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:resetCounter"))
		return soap_serve_ns__resetCounter(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getAFrameHexBinary"))
		return soap_serve_ns__getAFrameHexBinary(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getAFramebase64Binary"))
		return soap_serve_ns__getAFramebase64Binary(soap);
	if (!soap_match_tag(soap, soap->tag, "ns:getAFramebaseDimeStream"))
		return soap_serve_ns__getAFramebaseDimeStream(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getCurrentFoundCount(struct soap *soap)
{	struct ns__getCurrentFoundCount soap_tmp_ns__getCurrentFoundCount;
	struct ns__getCurrentFoundCountResponse soap_tmp_ns__getCurrentFoundCountResponse;
	int soap_tmp_int;
	soap_default_ns__getCurrentFoundCountResponse(soap, &soap_tmp_ns__getCurrentFoundCountResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__getCurrentFoundCountResponse.result = &soap_tmp_int;
	soap_default_ns__getCurrentFoundCount(soap, &soap_tmp_ns__getCurrentFoundCount);
	soap->encodingStyle = "";
	if (!soap_get_ns__getCurrentFoundCount(soap, &soap_tmp_ns__getCurrentFoundCount, "ns:getCurrentFoundCount", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getCurrentFoundCount(soap, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__getCurrentFoundCountResponse(soap, &soap_tmp_ns__getCurrentFoundCountResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getCurrentFoundCountResponse(soap, &soap_tmp_ns__getCurrentFoundCountResponse, "ns:getCurrentFoundCountResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getCurrentFoundCountResponse(soap, &soap_tmp_ns__getCurrentFoundCountResponse, "ns:getCurrentFoundCountResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__changeConditionToFind(struct soap *soap)
{	struct ns__changeConditionToFind soap_tmp_ns__changeConditionToFind;
	struct ns__changeConditionToFindResponse soap_tmp_ns__changeConditionToFindResponse;
	int soap_tmp_int;
	soap_default_ns__changeConditionToFindResponse(soap, &soap_tmp_ns__changeConditionToFindResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__changeConditionToFindResponse.result = &soap_tmp_int;
	soap_default_ns__changeConditionToFind(soap, &soap_tmp_ns__changeConditionToFind);
	soap->encodingStyle = "";
	if (!soap_get_ns__changeConditionToFind(soap, &soap_tmp_ns__changeConditionToFind, "ns:changeConditionToFind", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__changeConditionToFind(soap, soap_tmp_ns__changeConditionToFind.color, soap_tmp_ns__changeConditionToFind.threshold, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__changeConditionToFindResponse(soap, &soap_tmp_ns__changeConditionToFindResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__changeConditionToFindResponse(soap, &soap_tmp_ns__changeConditionToFindResponse, "ns:changeConditionToFindResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__changeConditionToFindResponse(soap, &soap_tmp_ns__changeConditionToFindResponse, "ns:changeConditionToFindResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__resetCounter(struct soap *soap)
{	struct ns__resetCounter soap_tmp_ns__resetCounter;
	struct ns__resetCounterResponse soap_tmp_ns__resetCounterResponse;
	int soap_tmp_int;
	soap_default_ns__resetCounterResponse(soap, &soap_tmp_ns__resetCounterResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__resetCounterResponse.result = &soap_tmp_int;
	soap_default_ns__resetCounter(soap, &soap_tmp_ns__resetCounter);
	soap->encodingStyle = "";
	if (!soap_get_ns__resetCounter(soap, &soap_tmp_ns__resetCounter, "ns:resetCounter", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__resetCounter(soap, &soap_tmp_int);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__resetCounterResponse(soap, &soap_tmp_ns__resetCounterResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__resetCounterResponse(soap, &soap_tmp_ns__resetCounterResponse, "ns:resetCounterResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__resetCounterResponse(soap, &soap_tmp_ns__resetCounterResponse, "ns:resetCounterResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFrameHexBinary(struct soap *soap)
{	struct ns__getAFrameHexBinary soap_tmp_ns__getAFrameHexBinary;
	struct ns__getAFrameHexBinaryResponse soap_tmp_ns__getAFrameHexBinaryResponse;
	struct xsd__hexBinary soap_tmp_xsd__hexBinary;
	soap_default_ns__getAFrameHexBinaryResponse(soap, &soap_tmp_ns__getAFrameHexBinaryResponse);
	soap_default_xsd__hexBinary(soap, &soap_tmp_xsd__hexBinary);
	soap_tmp_ns__getAFrameHexBinaryResponse.result = &soap_tmp_xsd__hexBinary;
	soap_default_ns__getAFrameHexBinary(soap, &soap_tmp_ns__getAFrameHexBinary);
	soap->encodingStyle = "";
	if (!soap_get_ns__getAFrameHexBinary(soap, &soap_tmp_ns__getAFrameHexBinary, "ns:getAFrameHexBinary", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getAFrameHexBinary(soap, &soap_tmp_xsd__hexBinary);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__getAFrameHexBinaryResponse(soap, &soap_tmp_ns__getAFrameHexBinaryResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getAFrameHexBinaryResponse(soap, &soap_tmp_ns__getAFrameHexBinaryResponse, "ns:getAFrameHexBinaryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getAFrameHexBinaryResponse(soap, &soap_tmp_ns__getAFrameHexBinaryResponse, "ns:getAFrameHexBinaryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFramebase64Binary(struct soap *soap)
{	struct ns__getAFramebase64Binary soap_tmp_ns__getAFramebase64Binary;
	struct ns__getAFramebase64BinaryResponse soap_tmp_ns__getAFramebase64BinaryResponse;
	struct xsd__base64Binary soap_tmp_xsd__base64Binary;
	soap_default_ns__getAFramebase64BinaryResponse(soap, &soap_tmp_ns__getAFramebase64BinaryResponse);
	soap_default_xsd__base64Binary(soap, &soap_tmp_xsd__base64Binary);
	soap_tmp_ns__getAFramebase64BinaryResponse.result = &soap_tmp_xsd__base64Binary;
	soap_default_ns__getAFramebase64Binary(soap, &soap_tmp_ns__getAFramebase64Binary);
	soap->encodingStyle = "";
	if (!soap_get_ns__getAFramebase64Binary(soap, &soap_tmp_ns__getAFramebase64Binary, "ns:getAFramebase64Binary", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getAFramebase64Binary(soap, &soap_tmp_xsd__base64Binary);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__getAFramebase64BinaryResponse(soap, &soap_tmp_ns__getAFramebase64BinaryResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getAFramebase64BinaryResponse(soap, &soap_tmp_ns__getAFramebase64BinaryResponse, "ns:getAFramebase64BinaryResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getAFramebase64BinaryResponse(soap, &soap_tmp_ns__getAFramebase64BinaryResponse, "ns:getAFramebase64BinaryResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns__getAFramebaseDimeStream(struct soap *soap)
{	struct ns__getAFramebaseDimeStream soap_tmp_ns__getAFramebaseDimeStream;
	struct ns__getAFramebaseDimeStreamResponse soap_tmp_ns__getAFramebaseDimeStreamResponse;
	struct xsd__Dimebase64Binary soap_tmp_xsd__Dimebase64Binary;
	soap_default_ns__getAFramebaseDimeStreamResponse(soap, &soap_tmp_ns__getAFramebaseDimeStreamResponse);
	soap_default_xsd__Dimebase64Binary(soap, &soap_tmp_xsd__Dimebase64Binary);
	soap_tmp_ns__getAFramebaseDimeStreamResponse.result = &soap_tmp_xsd__Dimebase64Binary;
	soap_default_ns__getAFramebaseDimeStream(soap, &soap_tmp_ns__getAFramebaseDimeStream);
	soap->encodingStyle = "";
	if (!soap_get_ns__getAFramebaseDimeStream(soap, &soap_tmp_ns__getAFramebaseDimeStream, "ns:getAFramebaseDimeStream", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = ns__getAFramebaseDimeStream(soap, &soap_tmp_xsd__Dimebase64Binary);
	if (soap->error)
		return soap->error;
	soap_serializeheader(soap);
	soap_serialize_ns__getAFramebaseDimeStreamResponse(soap, &soap_tmp_ns__getAFramebaseDimeStreamResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__getAFramebaseDimeStreamResponse(soap, &soap_tmp_ns__getAFramebaseDimeStreamResponse, "ns:getAFramebaseDimeStreamResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__getAFramebaseDimeStreamResponse(soap, &soap_tmp_ns__getAFramebaseDimeStreamResponse, "ns:getAFramebaseDimeStreamResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

/* End of soapServer.cpp */
